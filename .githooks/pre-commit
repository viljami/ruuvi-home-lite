#!/bin/bash
set -e

echo "🔍 Running pre-commit quality checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
    exit 1
}

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    print_error "Not in project root directory"
fi

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo "📦 Installing dependencies..."
    npm install
fi

# 1. TypeScript compilation check
echo "🔨 Checking TypeScript compilation..."
if ! make build > /dev/null 2>&1; then
    print_error "TypeScript compilation failed"
fi
print_status "TypeScript compilation passed"

# 2. Run unit tests
echo "🧪 Running unit tests..."
if ! make test-unit > /dev/null 2>&1; then
    print_error "Unit tests failed"
fi
print_status "Unit tests passed"

# 3. Check for common issues
echo "🔍 Checking for common issues..."

# Check for TODO/FIXME comments in TypeScript files
if grep -r "TODO\|FIXME" src/ 2>/dev/null; then
    print_warning "Found TODO/FIXME comments in source code"
fi

# Allow console.log statements (useful for debugging and logging)
# Removed restrictive console.log check

# Check for hardcoded credentials
if grep -r "password.*=" src/ 2>/dev/null | grep -v "process.env"; then
    print_error "Found potential hardcoded credentials"
fi

# 4. Check file permissions on sensitive files
if [ -f ".env" ]; then
    if [ "$(stat -c %a .env 2>/dev/null || stat -f %A .env 2>/dev/null)" != "600" ]; then
        print_error ".env file should have 600 permissions"
    fi
fi

# 5. Ensure no sensitive files are being committed (except .env.example)
if git diff --cached --name-only | grep -E "^\.env$" > /dev/null; then
    print_error "Attempting to commit .env file (use .env.example for templates)"
fi

sensitive_files=("*.key" "*.crt" "*.db" "logs/" "*.log")
for pattern in "${sensitive_files[@]}"; do
    if git diff --cached --name-only | grep -E "$pattern" > /dev/null; then
        print_error "Attempting to commit sensitive file matching pattern: $pattern"
    fi
done

# 6. Check dist/ directory is not being committed
if git diff --cached --name-only | grep "^dist/" > /dev/null; then
    print_error "Attempting to commit build artifacts (dist/ directory)"
fi

# 7. Ensure .gitignore is protecting sensitive files
if [ ! -f ".gitignore" ]; then
    print_error ".gitignore file is missing"
fi

required_ignores=(".env" "*.db" "dist/" "logs/" "*.key" "*.crt")
for ignore in "${required_ignores[@]}"; do
    if ! grep -q "$ignore" .gitignore; then
        print_error ".gitignore missing protection for: $ignore"
    fi
done

# Ensure .env.example is allowed
if grep -q "^\.env\.example$" .gitignore; then
    print_error ".gitignore should NOT ignore .env.example (it's a template file)"
fi

print_status "All quality checks passed!"
echo "🚀 Commit approved - code is ready for publication"